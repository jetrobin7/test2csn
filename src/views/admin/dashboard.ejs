<!DOCTYPE html>
<html lang="en">

<head>
    <title>Dashboard</title>
    <link rel="stylesheet" href="/assets/dashboard.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> <!-- Include Chart.js Library -->
</head>

<body>
    <%- include('../partials/sidebar') %>
    <%- include('../partials/navbar') %>

    <!-- Main Content -->
    <div class="dashboard">
        <div class="main-content">

            <!-- Total of Students Section -->
            <div class="row mt-4">
                <div class="row">
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body d-flex align-items-center">
                                <div class="icon-container">
                                    <i class="bx bxs-user-rectangle"></i> <!-- Icon representing students -->
                                </div>
                                <div class="ms-3">
                                    <h3 class="fs-2" id="total-students-count">0</h3>
                                    <p>Total Students</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body d-flex align-items-center">
                                <div class="icon-container">
                                    <i class="bx bxs-chalkboard"></i> <!-- Icon representing teachers -->
                                </div>
                                <div class="ms-3">
                                    <h3 class="fs-2" id="total-teachers-count">0</h3>
                                    <p>Total Teachers</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body d-flex align-items-center" id="attendance-card">
                                <div class="icon-container">
                                    <i class="bx bx-bell"></i> <!-- Icon representing notifications -->
                                </div>
                                <div class="ms-3">
                                    <h3 class="fs-2" id="total-attendance-count">0</h3>
                                    <p>Total Attendance</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>      
            </div>

            <!-- Attendance Modal -->
<div class="modal fade" id="attendanceModal" tabindex="-1" aria-labelledby="attendanceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="attendanceModalLabel">Attendance Overview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="d-flex justify-content-center mb-3">
                    <button class="btn btn-outline-primary me-2" id="today-btn">Today</button>
                    <button class="btn btn-outline-primary me-2" id="week-btn">This Week</button>
                    <button class="btn btn-outline-primary" id="month-btn">This Month</button>
                </div>
                <canvas id="attendanceChart"></canvas>
            </div>
        </div>
    </div>
</div>


<script>
    // Open the attendance modal on card click
    document.getElementById('attendance-card').addEventListener('click', () => {
        const modal = new bootstrap.Modal(document.getElementById('attendanceModal'));
        modal.show();
        updateAttendanceChart('today'); // Default view is "Today"
    });

    // Event listeners for time range buttons
    document.getElementById('today-btn').addEventListener('click', () => updateAttendanceChart('today'));
    document.getElementById('week-btn').addEventListener('click', () => updateAttendanceChart('week'));
    document.getElementById('month-btn').addEventListener('click', () => updateAttendanceChart('month'));

    // Fetch attendance data
    async function fetchAttendanceData(range) {
        try {
            const response = await fetch(`/api/attendance?range=${range}`);
            return await response.json(); // Expected: { present: number, absent: number }
        } catch (error) {
            console.error('Error fetching attendance data:', error);
            return { present: 0, absent: 0 };
        }
    }

    // Render the semi-donut chart
    let attendanceChart;
    async function updateAttendanceChart(range) {
        const data = await fetchAttendanceData(range);
        const ctx = document.getElementById('attendanceChart').getContext('2d');

        if (attendanceChart) {
            attendanceChart.destroy(); // Destroy existing chart
        }

        attendanceChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Present', 'Absent'],
                datasets: [
                    {
                        data: [data.present, data.absent],
                        backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)'],
                        borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],
                        borderWidth: 1,
                    },
                ],
            },
            options: {
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                    },
                },
                cutout: '50%', // Semi-donut effect
            },
        });
    }
</script>


            <script>
                async function fetchTotalStudents() {
                    const response = await fetch('/api/students'); // Ensure this route returns the student data as JSON
                    const students = await response.json();
                    return students.length; // Return the count of students
                }
            
                async function displayTotalStudents() {
                    const totalStudents = await fetchTotalStudents();
                    document.getElementById('total-students-count').textContent = totalStudents; // Update the total count
                }
            
                displayTotalStudents();
                
            </script>

            <script>
                async function fetchTotalTeachers() {
                    const response = await fetch('/api/teachers'); // Ensure this route returns the teacher count
                    const data = await response.json();
                    return data.count; // Return the count of teachers
                }

                async function displayTotalTeachers() {
                    const totalTeachers = await fetchTotalTeachers();
                    document.getElementById('total-teachers-count').textContent = totalTeachers; // Update the total count
                }

                displayTotalTeachers();
            </script>



            <!-- Buttons Section -->
            <div class="buttons-section">
                <a href="/admin/teacher_schedule" class="button-schedule">
                    <i class="bx bxs-calendar"></i> Teachers Schedule
                </a>
                <a href="/admin/teachers" class="button-student-list">
                    <i class='bx bxs-group'></i> Student List
                </a>
                <a href="../admin/student_progress.php" class="button-student-progress">
                    <i class='bx bxs-bar-chart-square'></i> Student Progress
                </a>
            </div>

            <!-- Chart and Calendar Section -->
            <div class="row mt-4">
                <!-- Chart Section -->
                <div class="col-md-6">
                    <div class="chart-container">
                        <h2>Age Distribution by Gender</h2>
                        <canvas id="genderAgeChart"></canvas>
                    </div>
                </div>

            <!-- Calendar Section -->
            <div class="col-md-6">
                <div class="calendar-container">
                    <h2>Calendar of Activities</h2>
                    <div class="p-3 bg-white shadow-sm rounded">
                        <div class="mt-3">
                            <h4>Upcoming Activities:</h4>
                            <ul id="activity-list" class="list-group">
                                <% activities.forEach((activity) => { %>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>
                                           <Strong> <%= activity.title %> </Strong>
                                            (<%= new Date(activity.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %> 
                                            <%= new Date(activity.date).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true }) %>)
                                        </span>
                                        <% if (!activity.isCompleted) { %>
                                            <button class="btn btn-success btn-sm done-btn" data-id="<%= activity._id %>">Done</button>
                                        <% } else { %>
                                            <span class="badge bg-success">Done</span>
                                        <% } %>
                                    </li>
                                <% }) %>
                            </ul>
                            
                        </div>
                        <button id="addActivityBtn" class="btn btn-primary mt-3">Add Activity</button>
                    </div>
                </div>
            </div>

            </div>
            </div>

            <!-- Add Activity Modal -->
            <div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="eventModalLabel">Add An Event</h5>
                            <!-- Close Button -->
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="eventForm">
                                <div class="mb-3">
                                    <label for="eventTitle" class="form-label">Event Title</label>
                                    <input type="text" class="form-control" id="eventTitle" required>
                                </div>
                                <div class="mb-3">
                                    <label for="eventDate" class="form-label">Event Date</label>
                                    <input type="date" class="form-control" id="eventDate" required>
                                </div>
                                <div class="mb-3">
                                    <label for="eventTime" class="form-label">Event Time</label>
                                    <input type="time" class="form-control" id="eventTime" required>
                                </div>
                                <div class="mb-3">
                                    <label for="eventDetails" class="form-label">Details</label>
                                    <textarea class="form-control" id="eventDetails" rows="3"></textarea>
                                </div>
                                <button type="submit" class="btn btn-primary">Save Event</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>


            <script>
                // JavaScript part to handle "Done" button functionality
                document.querySelectorAll('.done-btn').forEach(button => {
                    button.addEventListener('click', async (event) => {
                        const activityId = event.target.getAttribute('data-id');
                        
                        try {
                            // Send request to mark activity as done
                            const response = await fetch(`/api/activities/${activityId}/done`, {
                                method: 'PATCH',
                            });

                            if (response.ok) {
                                // Remove the activity from the UI immediately
                                const listItem = event.target.closest('li');
                                listItem.remove();  // Remove the activity from the list
                                
                                alert('Activity marked as done');
                            } else {
                                alert('Failed to mark activity as done.');
                            }
                        } catch (error) {
                            console.error('Error marking activity as done:', error);
                        }
                    });
                });

        
                document.getElementById('addActivityBtn').addEventListener('click', () => {
                    const modal = new bootstrap.Modal(document.getElementById('eventModal'));
                    modal.show();
                });
        
                // JavaScript part to handle "Save Event" and automatically close the modal
                document.getElementById('eventForm').addEventListener('submit', async (event) => {
                    event.preventDefault();

                    const title = document.getElementById('eventTitle').value.trim();
                    const date = document.getElementById('eventDate').value;
                    const time = document.getElementById('eventTime').value;
                    const details = document.getElementById('eventDetails').value.trim();

                    if (!title || !date || !time) {
                        alert('Please enter title, date, and time.');
                        return;
                    }

                    try {
                        const response = await fetch('/api/activities', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ title, date, time, details }),
                        });

                        const newActivity = await response.json();

                        if (response.ok) {
                            // Add the new activity to the list dynamically
                            const activityList = document.getElementById('activity-list');
                            const listItem = document.createElement('li');
                            listItem.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center');
                            listItem.innerHTML = `
                                <span>${newActivity.title} (${new Date(newActivity.date).toLocaleDateString()} ${newActivity.time})</span>
                                <button class="btn btn-success btn-sm done-btn" data-id="${newActivity._id}">Done</button>
                            `;
                            activityList.appendChild(listItem);

                            // Reset the form fields after successful submission
                            document.getElementById('eventForm').reset();

                            // Get the modal element and close it after saving
                            // const modalElement = document.getElementById('eventModal');
                            // const modal = new bootstrap.Modal(modalElement);  // Initialize the modal instance
                            // modal.hide();  // Hide the modal after saving the event

                            // Redirect to the dashboard after saving the event
                            window.location.href = '/admin/dashboard'; // This will redirect to the dashboard page
                        } else {
                            alert('Failed to add activity.');
                        }
                    } catch (error) {
                        console.error('Error adding activity:', error);
                    }
                });

            </script>
        
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>


    <!-- JavaScript for submenu toggle -->
    <script>
        const menuToggles = document.querySelectorAll('[data-bs-toggle="collapse"]');

        menuToggles.forEach(toggle => {
            toggle.addEventListener('click', function () {
                const allSubmenus = document.querySelectorAll('.collapse');

                allSubmenus.forEach(menu => {
                    if (menu !== this.nextElementSibling) {
                        menu.classList.remove('show');
                    }
                });
            });
        });
    </script>

    <!-- Fetch data for the chart and create it -->
    <script>
        // Fetch student data for chart
        async function fetchStudentData() {
            try {
                const response = await fetch('/api/students');
                return await response.json(); // Retrieve data from the API
            } catch (error) {
                console.error('Failed to fetch student data:', error);
                return [];
            }
        }
    
        // Function to calculate age distribution
        function calculateAgeDistribution(students) {
            const maleCounts = [0, 0, 0, 0, 0]; // Count for each age range
            const femaleCounts = [0, 0, 0, 0, 0];

            students.forEach(student => {
                const age = new Date().getFullYear() - new Date(student.dateOfBirth).getFullYear(); // Calculate age

                if (student.gender === 'Male') {
                    if (age <= 5) maleCounts[0]++;
                    else if (age <= 8) maleCounts[1]++;
                    else if (age <= 13) maleCounts[2]++;
                    else if (age <= 17) maleCounts[3]++;
                    else if (age <= 25) maleCounts[4]++;
                } else if (student.gender === 'Female') {
                    if (age <= 5) femaleCounts[0]++;
                    else if (age <= 8) femaleCounts[1]++;
                    else if (age <= 13) femaleCounts[2]++;
                    else if (age <= 17) femaleCounts[3]++;
                    else if (age <= 25) femaleCounts[4]++;
                }
            });

            return { maleCounts, femaleCounts };
        }
    
        // Function to process and display the chart
        async function createChart() {
            const students = await fetchStudentData();
            const { maleCounts, femaleCounts } = calculateAgeDistribution(students);
    
            const ctx = document.getElementById('genderAgeChart').getContext('2d');
    
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['1-5', '6-8', '9-13', '14-17', '18-25'],
                    datasets: [
                        {
                            label: 'Male',
                            data: maleCounts,
                            backgroundColor: 'rgba(54, 162, 235, 0.6)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Female',
                            data: femaleCounts,
                            backgroundColor: 'rgba(255, 99, 132, 0.6)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Number of Students'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Age Range'
                            }
                        }
                    }
                }
            });
        }
    
        createChart(); // Call the function to create the chart
    </script>

    
</body>
</html>